#pragma once
#include "FBXModel.h"
#include "Camera.h"
#include "FbxLoader.h"

#include <Windows.h>
#include <wrl.h>
#include <d3d12.h>
#include <d3dx12.h>
#include <DirectXMath.h>
#include <string>

class FBXObject3d
{
protected: //エイリアス
	template <class T> using ComPtr = Microsoft::WRL::ComPtr<T>;
	using XMFLOAT2 = DirectX::XMFLOAT2;
	using XMFLOAT3 = DirectX::XMFLOAT3;
	using XMFLOAT4 = DirectX::XMFLOAT4;
	using XMMATRIX = DirectX::XMMATRIX;

public: //定数
    //ボーンの最大数
	static const int32_t MAX_BONES = 32;

public: //サブクラス
	//定数バッファ用データ構造体
	struct ConstBufferDataTransform
	{
		XMMATRIX viewproj_;
		XMMATRIX world_;
		XMFLOAT3 cameraPos_;
	};

	struct ConstBufferDataSkin
	{
		XMMATRIX bones_[MAX_BONES];
	};

public: //静的メンバ関数
	//セッター
	static void SetDevice(ID3D12Device* device) { FBXObject3d::device_ = device; }
	static void SetCamera(Camera* camera) { FBXObject3d::camera_ = camera; }
	static void CreateGraphicsPipeline();

public: //メンバ関数
	/// <summary>
	/// 初期化
	/// </summary>
	void Initialize();

	/// <summary>
	/// 更新処理
	/// </summary>
	void Update();

	/// <summary>
	/// モデルのセット
	/// </summary>
	/// <param name="model">モデル</param>
	void SetModel(FBXModel* model) { this->model_ = model; }

	/// <summary>
	/// 描画
	/// </summary>
	/// <param name="cmdList">コマンドリスト</param>
	void Draw(ID3D12GraphicsCommandList* cmdList);

	/// <summary>
    /// 座標の取得
    /// </summary>
    /// <returns>座標</returns>
	const XMFLOAT3& GetPosition() { return position_; }

	/// <summary>
	/// 座標の設定
	/// </summary>
	/// <param name="position">座標</param>
	void SetPosition(XMFLOAT3 position) { position_ = position; }

	/// <summary>
	/// 大きさの取得
	/// </summary>
	/// <returns></returns>
	const XMFLOAT3& GetScale() { return scale_; }

	/// <summary>
	/// 大きさの設定
	/// </summary>
	/// <param name="scale"></param>
	void SetScale(XMFLOAT3 scale) { scale_ = scale; }

	/// <summary>
	/// 回転角の取得
	/// </summary>
	/// <returns></returns>
	const XMFLOAT3& GetRotation() { return rotation_; }

	/// <summary>
	/// 回転角の設定
	/// </summary>
	/// <param name="rotation"></param>
	void SetRotation(XMFLOAT3 rotation) { rotation_ = rotation; }

	/// <summary>
	/// アニメーションを再生
	/// </summary>
	/// <param name="isLoop">ループ再生フラグ</param>
	/// <param name="animeNo">アニメーション番号</param>
	void PlayAnimation(bool isLoop = true, int32_t animeNo = 0);

	/// <summary>
	/// アニメーションを停止
	/// </summary>
	void StopAnimation();

	/// <summary>
	/// 再生中かどうかの取得
	/// </summary>
	/// <returns></returns>
	const bool& GetIsAnimation() { return isPlay_; }

	/// <summary>
	/// ワールド変換行列の取得
	/// </summary>
	/// <returns>ワールド変換行列</returns>
	const XMMATRIX& GetMatWorld() { return matWorld_; }

protected: //メンバ変数
	//定数バッファ
	ComPtr<ID3D12Resource> constBufferTransform_;
	//ローカルスケール
	XMFLOAT3 scale_ = { 1, 1, 1 };
	//X,Y,Z軸回りのローカル回転角
	XMFLOAT3 rotation_ = { 0, 0, 0 };
	//ローカル座標
	XMFLOAT3 position_ = { 0, 0, 0 };
	//ローカルワールド変換行列
	XMMATRIX matWorld_;
	//モデル
	FBXModel* model_ = nullptr;
	//定数バッファ(スキン)
	ComPtr<ID3D12Resource> constBufferSkin_;
	//1フレームの時間
	FbxTime frameTime_;
	//アニメーション開始時間
	FbxTime startTime_;
	//アニメーション終了時間
	FbxTime endTime_;
	//現在時間(アニメーション)
	FbxTime currentTime_;
	//アニメーション再生中かどうかのフラグ
	bool isPlay_ = false;
	//アニメーションをループさせるかどうかのフラグ
	bool isLoop_ = false;

private: //静的メンバ変数
	//デバイス
	static ID3D12Device* device_;
	//カメラ
	static Camera* camera_;
	//ルートシグネチャ
	static ComPtr<ID3D12RootSignature> rootsignature_;
	//パイプラインステートオブジェクト
	static ComPtr<ID3D12PipelineState> pipelinestate_;
};

